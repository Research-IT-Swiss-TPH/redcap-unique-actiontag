"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var STPH_UniqueAT=STPH_UniqueAT||{};STPH_UniqueAT.log=function(){if(STPH_UniqueAT.params.debug)switch(arguments.length){case 1:return void console.log(arguments[0]);case 2:return void console.log(arguments[0],arguments[1]);case 3:return void console.log(arguments[0],arguments[1],arguments[2]);case 4:return void console.log(arguments[0],arguments[1],arguments[2],arguments[3]);default:console.log(arguments);}},STPH_UniqueAT.init=function(){STPH_UniqueAT.log("Unique Action Tag - Initializing",STPH_UniqueAT),$("#field_validation_error_state").val(1),STPH_UniqueAT.params.errors,Object.keys(STPH_UniqueAT.params.actionTags).forEach(function(a){var b=STPH_UniqueAT.params.actionTags[a];Object.values(b).forEach(function(a){if("text"==a.type)for(var b=0;b<a.tagPerFieldCount;b++)a[b]&&(a[b].tag=a.tag,new STPH_UniqueAT.ActionTagClass(a[b]).init())})})},STPH_UniqueAT.ActionTagClass=function(){function a(b){_classCallCheck(this,a),this.atv=b,this.ob=document.getElementsByName(this.atv.field)[0],this.request=STPH_UniqueAT.request,this.requestUrl=STPH_UniqueAT.request.url,this.requestData={tag:this.atv.tag,value:null,field:this.atv.field,targets:this.atv.targets,pid:this.request.pid,record:this.request.record,event_id:this.request.event_id,instance:this.request.instance}}return _createClass(a,[{key:"init",value:function init(){this.writeLabels(),this.bindOnChange(),this.bindOnBlur(),this.ajaxCheckUnique("on-load")}},{key:"writeLabels",value:function writeLabels(){if(STPH_UniqueAT.params.labels){STPH_UniqueAT.log("["+this.requestData.tag+"]["+this.atv.field+"] Apply actiontag with target(s): "+this.atv.targets+".)");var a=$("#label-"+this.atv.field+" tr").find("td:first");a.html(a.text()+"<div style=\"font-weight:100;font-size:12px;\">("+this.requestData.tag+")</div>")}}},{key:"bindOnChange",value:function bindOnChange(){var a=this;if("@UNIQUE-STRICT"==this.requestData.tag){var b=this.requestData.targets,c=function(c){b[c]==a.requestData.field?$("input[name="+b[c]+"]").bind("afterAjaxCheck",function(){console.log("After ajax done."),a.onPageCheckUnique(b[c])}):$("input[name="+b[c]+"]").bind("change",function(){a.onPageCheckUnique(b[c])})};for(var d in b)c(d)}}},{key:"onPageCheckUnique",value:function onPageCheckUnique(){var a=this;if(0<this.requestData.value.length){this.toggleUI("start-load");var b=[],c=this.requestData.targets.filter(function(b){return b!==a.requestData.field});c.forEach(function(c){var d=$("input[name="+c+"]");d.val()==a.requestData.value?(d.css("background-color","#FFB7BE"),d.css("font-weight","bold"),b.push(c)):(d.css("background-color","#FFFFFF"),d.css("font-weight","normal"))}),0<b.length?this.toggleUI("show-warning",!0,b):this.toggleUI("remove-warning"),this.toggleUI("stop-load")}else this.toggleUI("remove-warning")}},{key:"bindOnBlur",value:function bindOnBlur(){var a=this;STPH_UniqueAT.log("["+this.requestData.tag+"]["+this.atv.field+"] Bind \"onblur\" event."),$("input[name="+this.atv.field+"]").bind("blur",function(){a.ajaxCheckUnique("on-blur")})}},{key:"ajaxCheckUnique",value:function ajaxCheckUnique(a){var b=this;this.requestData.value=trim(this.ob.value),0<this.requestData.value.length?(this.toggleUI("start-load"),$.post(this.requestUrl,{data:this.requestData}).done(function(c){0==c?(b.toggleUI("remove-duplicate"),$("input[name="+b.requestData.field+"]").trigger("afterAjaxCheck")):b.toggleUI("show-duplicate","on-blur"==a),b.toggleUI("stop-load")}).fail(function(a){STPH_UniqueAT.log(a),alert(woops),b.toggleUI("stop-load")})):this.toggleUI("remove-duplicate")}},{key:"toggleUI",value:function toggleUI(a){var b=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;"start-load"===a?(this.ob.classList.add("loading-unique"),$("#formSaveTip button, #form :input[name=\""+this.atv.field+"\"], #form button").prop("disabled",!0)):"stop-load"===a?(this.ob.classList.remove("loading-unique"),$("#formSaveTip button, #form :input[name=\""+this.atv.field+"\"], #form button").prop("disabled",!1)):"show-duplicate"===a?(STPH_UniqueAT.log("Detect duplicate for field "+this.atv.field),this.ob.style.fontWeight="bold",this.ob.style.backgroundColor="#FFB7BE",b&&simpleDialog("The current field is a unique field (@UNIQUE action tag)"+lang.data_entry_107+" "+lang.data_entry_109+" "+lang.data_entry_110+" "+lang.data_entry_111+" ("+this.ob.value+") "+lang.period+" "+lang.data_entry_108,lang.data_entry_105,"suf_warning_dialog",500,"$('#form :input[name="+this.atv.field+"]').focus();",lang.calendar_popup_01)):"show-warning"===a?(STPH_UniqueAT.log("Warn of duplicate for field "+this.atv.field),this.ob.style.fontWeight="bold",this.ob.style.backgroundColor="#FFB7BE",b&&simpleDialog("Warning: You have entered a duplicate value in field(s) "+c+"  in conflict to "+this.atv.field)):"remove-warning"===a?(this.ob.style.fontWeight="normal",this.ob.style.backgroundColor="#FFFFFF"):"remove-duplicate"===a?(this.ob.style.fontWeight="normal",this.ob.style.backgroundColor="#FFFFFF"):void 0}}]),a}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,